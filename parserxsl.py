import re
import os
from typing import  Tuple, Optional
import pandas as pd


class Parser:

    #–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel 

    @staticmethod
    def load_landmarks_from_excel(file_path: str = "cultural_objects_mnn.xlsx"):
        try:
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return Parser.get_default_landmarks()
            
            df = pd.read_excel(file_path)
            landmarks = {}
            
            print("üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:", df.columns.tolist())
            
            name_col = None
            coords_col = None
            category_col = None
            rating_col = None
            time_col = None
            description_col = None
            features_col = None
            
            for i, col_name in enumerate(df.columns):
                col_lower = str(col_name).lower()
                if any(keyword in col_lower for keyword in ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name', '–æ–±—ä–µ–∫—Ç', 'title']):
                    name_col = i
                elif any(keyword in col_lower for keyword in ['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'coord', '–≥–µ–æ', 'point']):
                    coords_col = i
                elif any(keyword in col_lower for keyword in ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'category', '—Ç–∏–ø', 'type']):
                    category_col = i
                elif any(keyword in col_lower for keyword in ['—Ä–µ–π—Ç–∏–Ω–≥', 'rating', '–æ—Ü–µ–Ω–∫–∞']):
                    rating_col = i
                elif any(keyword in col_lower for keyword in ['–≤—Ä–µ–º—è', 'time', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']):
                    time_col = i
                elif any(keyword in col_lower for keyword in ['–æ–ø–∏—Å–∞–Ω–∏–µ', 'description', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']):
                    description_col = i
                elif any(keyword in col_lower for keyword in ['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', 'features', '—Ç–µ–≥–∏', 'tags']):
                    features_col = i
            
            print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ={name_col}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã={coords_col}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category_col}")
            
            for index, row in df.iterrows():
                try:
                    if name_col is None or pd.isna(row.iloc[name_col]):
                        continue
                    
                    name = str(row.iloc[name_col]).strip()
                    if not name or name == 'nan':
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    coords = None
                    if coords_col is not None and len(row) > coords_col:
                        coords_str = str(row.iloc[coords_col])
                        coords = Parser.parse_point_coordinates(coords_str)
                    
                    if not coords:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {name}")
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category = "other"
                    if category_col is not None and len(row) > category_col:
                        category_val = row.iloc[category_col]
                        if not pd.isna(category_val):
                            category = str(category_val).strip().lower()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
                    rating = 4.0
                    if rating_col is not None and len(row) > rating_col:
                        try:
                            rating_val = row.iloc[rating_col]
                            if not pd.isna(rating_val):
                                rating = float(rating_val)
                        except:
                            pass
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
                    visit_time = 1.0
                    if time_col is not None and len(row) > time_col:
                        try:
                            time_val = row.iloc[time_col]
                            if not pd.isna(time_val):
                                visit_time = float(time_val)/10
                        except:
                            pass
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                    description = ""
                    if description_col is not None and len(row) > description_col:
                        desc_val = row.iloc[description_col]
                        if not pd.isna(desc_val):
                            description = str(desc_val).strip()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                    features = []
                    if features_col is not None and len(row) > features_col:
                        features_val = row.iloc[features_col]
                        if not pd.isna(features_val):
                            features = [f.strip() for f in str(features_val).split(',') if f.strip()]
                    
                    landmarks[name] = {
                        'coordinates': coords,
                        'category': category,
                        'rating': rating,
                        'visit_time': visit_time,
                        'description': description,
                        'features': features,
                        'original_description': description 
                    }
                    
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {name} - {coords} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
                    continue
            
            print(f"üéØ –ò—Ç–æ–≥: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(landmarks)} –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            return landmarks
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
            return Parser.get_default_landmarks()
   
    @staticmethod
    def parse_point_coordinates(coord_str: str) -> Optional[Tuple[float, float]]:
        #–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ POINT –≥–¥–µ –¥–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–∞—è, —à–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–∞—è
        if pd.isna(coord_str) or not coord_str:
            return None
        
        coord_str = str(coord_str).strip()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è POINT 
        point_formats = [
            r'POINT\s*\(\s*([\d.]+)\s+([\d.]+)\s*\)',  
            r'POINT\(\s*([\d.]+)\s+([\d.]+)\s*\)',     
            r'\(\s*([\d.]+)\s+([\d.]+)\s*\)',        
            r'([\d.]+)\s+([\d.]+)',                    
        ]
        
        for pattern in point_formats:
            match = re.search(pattern, coord_str, re.IGNORECASE)
            if match:
                try:
                    lon = float(match.group(1))  # –¥–æ–ª–≥–æ—Ç–∞
                    lat = float(match.group(2))  # —à–∏—Ä–æ—Ç–∞
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ù–ù
                    if 43.0 <= lon <= 45.0 and 56.0 <= lat <= 57.0:
                        return (lat, lon)  
                    else:
                        print(f"‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –ø—Ä–µ–¥–µ–ª–æ–≤ –ù–ù: lon={lon}, lat={lat}")
                        
                except ValueError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª: {e}")
                    continue
        
        return None
    
    @staticmethod
    def get_default_landmarks():
        landmarks = {
            "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π –ö—Ä–µ–º–ª—å": {
                'coordinates': (56.3271, 44.0023),
                'category': '–∏—Å—Ç–æ—Ä–∏—è', 
                'rating': 4.8, 
                'visit_time': 1.5,
                'description': '–ö—Ä–µ–ø–æ—Å—Ç—å XVI –≤–µ–∫–∞ —Å 13 –±–∞—à–Ω—è–º–∏, –æ—Ç–∫—É–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –í–æ–ª–≥—É –∏ –û–∫—É.',
                'features': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –≤–∏–¥—ã'],
                'original_description': '–ö—Ä–µ–ø–æ—Å—Ç—å XVI –≤–µ–∫–∞ —Å 13 –±–∞—à–Ω—è–º–∏, –æ—Ç–∫—É–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥ –Ω–∞ –í–æ–ª–≥—É –∏ –û–∫—É.'
            },
            "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞": {
                'coordinates': (56.3300, 44.0125),
                'category': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 
                'rating': 4.5, 
                'visit_time': 0.5,
                'description': '–û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ª–µ—Å—Ç–Ω–∏—Ü –≤ –†–æ—Å—Å–∏–∏ (560 —Å—Ç—É–ø–µ–Ω–µ–π).',
                'features': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–§–æ—Ç–æ–ª–æ–∫–∞—Ü–∏–∏', '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –≤–∏–¥—ã'],
                'original_description': '–û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ª–µ—Å—Ç–Ω–∏—Ü –≤ –†–æ—Å—Å–∏–∏ (560 —Å—Ç—É–ø–µ–Ω–µ–π).'
            },
            "–ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞": {
                'coordinates': (56.3186, 44.0022),
                'category': '–ø—Ä–æ–≥—É–ª–∫–∞', 
                'rating': 4.7, 
                'visit_time': 2.0,
                'description': '–ì–ª–∞–≤–Ω–∞—è –ø–µ—à–µ—Ö–æ–¥–Ω–∞—è —É–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–∞.',
                'features': ['–®–æ–ø–ø–∏–Ω–≥', '–ö–∞—Ñ–µ', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'],
                'original_description': '–ì–ª–∞–≤–Ω–∞—è –ø–µ—à–µ—Ö–æ–¥–Ω–∞—è —É–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–∞.'
            },
            "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞": {
                'coordinates': (56.3250, 43.9850),
                'category': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 
                'rating': 4.6, 
                'visit_time': 1.0,
                'description': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —É–ª–∏—Ü–∞ —Å –∫—É–ø–µ—á–µ—Å–∫–∏–º–∏ –æ—Å–æ–±–Ω—è–∫–∞–º–∏.',
                'features': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–§–æ—Ç–æ–ª–æ–∫–∞—Ü–∏–∏'],
                'original_description': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —É–ª–∏—Ü–∞ —Å –∫—É–ø–µ—á–µ—Å–∫–∏–º–∏ –æ—Å–æ–±–Ω—è–∫–∞–º–∏.'
            },
            "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –§–µ–¥–æ—Ä–æ–≤—Å–∫–æ–≥–æ": {
                'coordinates': (56.3320, 43.9950),
                'category': '–ø—Ä–æ–≥—É–ª–∫–∞', 
                'rating': 4.4, 
                'visit_time': 0.5,
                'description': '–ñ–∏–≤–æ–ø–∏—Å–Ω–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è —Å –≤–∏–¥–æ–º –Ω–∞ –°—Ç—Ä–µ–ª–∫—É.',
                'features': ['–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –≤–∏–¥—ã', '–ü—Ä–∏—Ä–æ–¥–∞', '–§–æ—Ç–æ–ª–æ–∫–∞—Ü–∏–∏'],
                'original_description': '–ñ–∏–≤–æ–ø–∏—Å–Ω–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è —Å –≤–∏–¥–æ–º –Ω–∞ –°—Ç—Ä–µ–ª–∫—É.'
            },
            "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã": {
                'coordinates': (56.3100, 43.9900),
                'category': '–ø–∞—Ä–∫', 
                'rating': 4.3, 
                'visit_time': 1.0,
                'description': '–ú–µ–º–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ —Å –≤–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π.',
                'features': ['–ò—Å—Ç–æ—Ä–∏—è', '–ü—Ä–∏—Ä–æ–¥–∞', '–ü—Ä–æ–≥—É–ª–∫–∏'],
                'original_description': '–ú–µ–º–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ —Å –≤–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π.'
            },
            "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è —è—Ä–º–∞—Ä–∫–∞": {
                'coordinates': (56.3350, 43.9750),
                'category': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 
                'rating': 4.5, 
                'visit_time': 1.0,
                'description': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å.',
                'features': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ò—Å—Ç–æ—Ä–∏—è', '–í—ã—Å—Ç–∞–≤–∫–∏'],
                'original_description': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å.'
            },
            "–°–æ–±–æ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ": {
                'coordinates': (56.3330, 43.9750),
                'category': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 
                'rating': 4.6, 
                'visit_time': 0.5,
                'description': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π —Å–æ–±–æ—Ä –≤ –°—Ç—Ä–µ–ª–∫–µ –û–∫–∏ –∏ –í–æ–ª–≥–∏.',
                'features': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–†–µ–ª–∏–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è'],
                'original_description': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π —Å–æ–±–æ—Ä –≤ –°—Ç—Ä–µ–ª–∫–µ –û–∫–∏ –∏ –í–æ–ª–≥–∏.'
            }
        }
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(landmarks)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        return landmarks
    
    
    @staticmethod
    def output_lendmarks():
        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–µ–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"
        LANDMARKS = Parser.load_landmarks_from_excel("cultural_objects_mnn.xlsx")
        if len(LANDMARKS) == 0:
            LANDMARKS = Parser.get_default_landmarks()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(LANDMARKS)} –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        return LANDMARKS
    

