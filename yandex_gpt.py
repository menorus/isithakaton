from typing import List, Tuple
import urllib.parse
import aiohttp
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

class YandexGPT:
    def __init__(self, api_key: str, folder_id: str, LANDMARKS):
        self.api_key = api_key
        self.folder_id = folder_id
        self.url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.LANDMARKS = LANDMARKS
    
    async def generate_text(self, prompt: str, temperature: float = 0.3) -> str:
        #–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT
        try:
            headers = {
                "Authorization": f"Api-Key {self.api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": temperature,
                    "maxTokens": 1000
                },
                "messages": [
                    {
                        "role": "system",
                        "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É. 
                        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è 
                        –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω. 
                        –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏."""
                    },
                    {
                        "role": "user",
                        "text": prompt
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.url, headers=headers, json=data, timeout=30) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result['result']['alternatives'][0]['message']['text']
                    else:
                        error_text = await response.text()
                        print(f"‚ùå YandexGPT API error: {response.status} - {error_text}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå YandexGPT error: {e}")
            return None
    
    async def enhance_landmark_description(self, landmark_name: str, original_data: dict, user_interest: str = "") -> str:
        #–£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é YandexGPT
        
        prompt = f"""
        –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞.
        
        –ù–∞–∑–≤–∞–Ω–∏–µ: {landmark_name}
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {original_data.get('category', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å')}
        –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(original_data.get('features', []))}
        –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {original_data.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
        
        {"–ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user_interest if user_interest else ""}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        - –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å
        - –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞ —Å—Ç–∏–ª—å
        - –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç:
        """
        
        enhanced_description = await self.generate_text(prompt)
        return enhanced_description or original_data.get('description', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.')
    
    async def generate_personal_recommendation(self, route: List[str], user_interest: str, available_time: str) -> str:
        #–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
        
        landmarks_info = []
        LANDMARKS = self.LANDMARKS
        for landmark in route[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if landmark in LANDMARKS:
                data = LANDMARKS[landmark]
                landmarks_info.append(f"{landmark} ({data.get('category', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å')})")
        
        prompt = f"""
        –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
        
        –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_interest}
        –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {available_time}
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {', '.join(landmarks_info)}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ü–æ–¥—á–µ—Ä–∫–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –≠–Ω—Ç—É–∑–∏–∞–∑–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
        - –ó–∞–∫–æ–Ω—á–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç:
        """
        
        recommendation = await self.generate_text(prompt, temperature=0.7)
        return recommendation or f"–û—Ç–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–∞—Å! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ–≥—É–ª–∫–æ–π –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É! üåÜ"


class YandexMaps:
    #–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
    EMOJI = {
        "start": "üåÜ", "restart": "üîÑ", "location": "üìç", "time": "‚è±Ô∏è", "route": "üß≠",
        "success": "‚úÖ", "error": "‚ùå", "welcome": "üëã", "interest": "üéØ", "loading": "‚è≥",
        "map": "üó∫Ô∏è", "yandex": "üîµ", "walk": "üö∂", "distance": "üìè", "rating": "‚≠ê",
        "info": "üìù", "feature": "‚ú®", "time_visit": "üïí", "category": "üè∑Ô∏è", "next": "‚û°Ô∏è",
        "full_route": "üß≠", "navigation": "üß≠", "food": "üç¥", "ai": "ü§ñ"
        }
    
    @staticmethod
    def generate_yandex_map_link(coordinates: Tuple[float, float], place_name: str = "") -> str:
        #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        lat, lon = coordinates
        encoded_name = urllib.parse.quote(place_name)
        return f"https://yandex.ru/maps/?pt={lon},{lat}&z=17&l=map&text={encoded_name}"
    

    @staticmethod
    def generate_route_map_link(route_landmarks: List[str], start_coords: Tuple[float, float],LANDMARKS) -> str:
        #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞
        if not route_landmarks:
            return None
        
        points = [f"{start_coords[0]},{start_coords[1]}"]
        
        for landmark in route_landmarks:
            if landmark in LANDMARKS:
                coords = LANDMARKS[landmark]['coordinates']
                points.append(f"{coords[0]},{coords[1]}")
        
        points_str = "~".join(points)
        return f"https://yandex.ru/maps/?rtext={points_str}&rtt=pd"
    

    @staticmethod
    def generate_individual_map_button(landmark: str,LANDMARKS) -> InlineKeyboardMarkup:
        #–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        if landmark not in LANDMARKS:
            return None
        
        coordinates = LANDMARKS[landmark]['coordinates']
        map_url = YandexMaps.generate_yandex_map_link(coordinates, landmark)
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{YandexMaps.EMOJI['map']} –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=map_url)]
        ])
    

    @staticmethod
    def generate_full_route_map_button(route_landmarks: List[str], start_coords: Tuple[float, float],LANDMARKS) -> InlineKeyboardMarkup:
        #–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        map_url = YandexMaps.generate_route_map_link(route_landmarks, start_coords,LANDMARKS)
        if not map_url:
            return None
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{YandexMaps.EMOJI['navigation']} –í–µ—Å—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ", url=map_url)]
        ])
