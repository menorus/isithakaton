from typing import List, Tuple, Dict
from geopy.distance import geodesic
# –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º 
DISPLAY_TO_CATEGORY_MAPPING = {
    "üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è": ["–∏—Å—Ç–æ—Ä–∏—è", "–º—É–∑–µ–π", "–ø–∞–º—è—Ç–Ω–∏–∫", "–∫—Ä–µ–º–ª—å"],
    "üèõÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–∑–¥–∞–Ω–∏–µ", "—Å–æ–±–æ—Ä", "—Ü–µ—Ä–∫–æ–≤—å"],
    "üèõÔ∏è –ú—É–∑–µ–∏": ["–º—É–∑–µ–π", "–≥–∞–ª–µ—Ä–µ—è", "–≤—ã—Å—Ç–∞–≤–∫–∞"],
    "üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ": ["–∞—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–∫—É–ª—å—Ç—É—Ä–∞", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"],
    "üé® –ö—É–ª—å—Ç—É—Ä–∞": ["–∫—É–ª—å—Ç—É—Ä–∞", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
    "üé® –°—Ç—Ä–∏—Ç-–∞—Ä—Ç": ["–∞—Ä—Ç","—Å—Ç—Ä–∏—Ç-–∞—Ä—Ç", "–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏", "—É–ª–∏—á–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ"],
    "üå≥ –ü–∞—Ä–∫–∏": ["–ø–∞—Ä–∫", "—Å–∞–¥", "—Å–∫–≤–µ—Ä"],
    "üå≥ –ü—Ä–∏—Ä–æ–¥–∞": ["–ø—Ä–∏—Ä–æ–¥–∞", "–ª–∞–Ω–¥—à–∞—Ñ—Ç", "–≤–∏–¥"],
    "üå≥ –û—Ç–¥—ã—Ö": ["–æ—Ç–¥—ã—Ö", "–ø—Ä–æ–≥—É–ª–∫–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"],
    "üç¥ –ï–¥–∞": ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–µ–¥–∞", "–∫—É—Ö–Ω—è", "–∫–æ—Ñ–µ", "–∫–æ—Ñ–µ–π–Ω—è", "–±–∞—Ä", "–±–∏—Å—Ç—Ä–æ", "—Å—Ç–æ–ª–æ–≤–∞—è", "–∑–∞–∫—É—Å–æ—á–Ω–∞—è"],
    "üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥": ["—à–æ–ø–ø–∏–Ω–≥", "–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ—Ä–≥–æ–≤—ã–π"],
    "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω—ã": ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ—Ä–≥–æ–≤—ã–π", "—à–æ–ø–ø–∏–Ω–≥"],
    "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∫–∏–Ω–æ", "–∫–ª—É–±"],
    "üé≠ –¢–µ–∞—Ç—Ä—ã": ["—Ç–µ–∞—Ç—Ä", "—Å–ø–µ–∫—Ç–∞–∫–ª—å", "—Å—Ü–µ–Ω–∞"],
    "üé≠ –ö–∏–Ω–æ": ["–∫–∏–Ω–æ", "—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ–∑–∞–ª"],
    "üåü –õ—é–±—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": []  
}

class RouteOptimizer:
    
    def __init__(self, landmarks: Dict):
        self.landmarks = landmarks
    
    def calculate_distance(self, coord1: Tuple[float, float], coord2: Tuple[float, float]) -> float:
        return geodesic(coord1, coord2).km
    
    
    def get_landmarks_by_interest(self, interest_display: str, max_landmarks: int = 10) -> List[str]:
        relevant_landmarks = []
        
        if interest_display == "üåü –õ—é–±—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
            return list(self.landmarks.keys())[:max_landmarks]
        
        search_keywords = DISPLAY_TO_CATEGORY_MAPPING.get(interest_display, [])
        
        if not search_keywords:
            return list(self.landmarks.keys())[:max_landmarks]
        
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è '{interest_display}': {search_keywords}")
        
        for name, data in self.landmarks.items():
            category_lower = data['category'].lower()
            description_lower = data.get('description', '').lower()
            features_lower = [f.lower() for f in data.get('features', [])]
            
            matches_category = any(keyword in category_lower for keyword in search_keywords)
            matches_description = any(keyword in description_lower for keyword in search_keywords)
            matches_features = any(any(keyword in feature for keyword in search_keywords) for feature in features_lower)
            
            if matches_category or matches_description or matches_features:
                relevant_landmarks.append(name)
        
        if len(relevant_landmarks) < 2:
            all_landmarks = list(self.landmarks.keys())
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            additional = [lm for lm in all_landmarks if lm not in relevant_landmarks]
            relevant_landmarks.extend(additional[:max_landmarks - len(relevant_landmarks)])
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(relevant_landmarks)} –º–µ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ '{interest_display}'")
        return relevant_landmarks[:max_landmarks]
    
    def calculate_places_by_time(self, available_time: str) -> int:
        time_mapping = {
            "1 —á–∞—Å": 2,   
            "2 —á–∞—Å–∞": 3,  
            "3 —á–∞—Å–∞": 4,  
            "4 —á–∞—Å–∞": 5   
        }
        return time_mapping.get(available_time, 3)
    
    def find_optimal_route(self, landmarks: List[str], start_point: Tuple[float, float], max_places: int = 5) -> List[str]:
        if not landmarks:
            return []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        landmarks_with_rating = []
        for landmark in landmarks:
            if landmark in self.landmarks:
                rating = self.landmarks[landmark]['rating']
                landmarks_with_rating.append((landmark, rating))
        
        landmarks_with_rating.sort(key=lambda x: x[1], reverse=True)
        
        top_landmarks = [lm[0] for lm in landmarks_with_rating[:max_places]]
        
        if not top_landmarks:
            return []
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
        unvisited = top_landmarks.copy()
        route = []
        current_point = start_point
        
        while unvisited:
            nearest = None
            min_distance = float('inf')
            
            for landmark in unvisited:
                if landmark in self.landmarks:
                    landmark_coords = self.landmarks[landmark]['coordinates']
                    distance = self.calculate_distance(current_point, landmark_coords)
                    if distance < min_distance:
                        min_distance = distance
                        nearest = landmark
            
            if nearest:
                route.append(nearest)
                current_point = self.landmarks[nearest]['coordinates']
                unvisited.remove(nearest)
        
        return route



